version: 2.1

templates:
  tagged-filter: &tagged-filter
    tags:
      only: /[0-9]+(\.[0-9]+)*/

executors:
  ubuntu-builder:
    docker:
      - image: trustlines/builder:master61
    working_directory: ~/repo

# define some common commands
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21
commands:
  create-venv:
    steps:
      - run:
          name: Create venv
          command: |
            python3.8 -m venv venv
            venv/bin/pip install -U pip wheel setuptools

  config-path:
    description: "set environment variables and change PATH"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/repo/venv/bin:${PATH}' >> ${BASH_ENV}
      - run:
          name: set DOCKER_ORG
          command: |
            echo ': \"${DOCKER_ORG:=trustlines}\"' >> ${BASH_ENV}

        # this allows us to set DOCKER_ORG from circleci when
        # building in a fork. makes testing easier.

  install-system-deps:
    steps:
      - run:
          name: Install system dependencies
          command: |
            sudo apt update
            sudo apt install -y curl make build-essential libssl-dev libsecp256k1-dev python3 python3-dev python3-distutils python3-venv pkg-config

  upload-docker-image:
    description: "Deploy docker image"
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '~'
      - checkout
      - config-path
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/tlbc-monitor.tar
            docker load --input ~/images/report-validator.tar
            docker image ls
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin

      - run:
          name: Upload docker images
          command: |
            git fetch --force origin release:remotes/origin/release
            VERSION=$(docker run --rm tlbc-monitor --version | tr '+' '_')
            if [[ ( "$(git rev-parse HEAD)" = "$(git rev-parse origin/release)" ) && ( "$CIRCLE_TAG" =~ [0-9]+\.[0-9]+\.[0-9]+) ]];
            then
                suffix=""
                versions=(release $VERSION)
            else
                suffix="-next"
                versions=($CIRCLE_BRANCH $CIRCLE_BRANCH$CIRCLE_BUILD_NUM)
            fi

            set -x
            for image in tlbc-monitor report-validator; do
                for v in "${versions[@]}"; do
                    docker tag $image $DOCKER_ORG/$image$suffix:$v
                    docker push $DOCKER_ORG/$image$suffix:$v
                done
            done
jobs:
  install:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - checkout
      - config-path
      - restore_cache:
          key: venv-py38-{{ checksum "constraints.txt" }}-{{ checksum "requirements.txt" }}
      - create-venv
      - run:
          name: Install requirements
          command: |
            pip install -c constraints.txt -r requirements.txt
      - save_cache:
          key: venv-py38-{{ checksum "constraints.txt" }}-{{ checksum "requirements.txt" }}
          paths:
            - venv
      - run:
          name: Install package
          command: |
            pip install -c constraints.txt .
      - run:
          name: Verify installed packages have compatible dependencies
          command: |
            pip check
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  python-39-compatibility:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - checkout
      - config-path
      - create-venv
      - run:
          name: Run tox for python 39
          command: |
            pip install -c constraints.txt tox
            tox -e py39

  run-flake8:
    executor: ubuntu-builder
    working_directory: ~/repo

    steps:
      - install-system-deps
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run flake8
          command: |
            flake8 setup.py src tests e2e_tests

  run-black:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - install-system-deps
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run black
          command: |
            black --check setup.py src tests e2e_tests

  run-mypy:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - install-system-deps
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports src tests

  run-pytest:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - install-system-deps
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run pytest
          command: |
            mkdir -p test-reports
            pytest --junitxml=test-reports/junit.xml --ignore=e2e_tests
      # export test metadata to circleci, see
      # https://circleci.com/docs/2.0/collect-test-data/#pytest
      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  build-docker-image:
    executor: ubuntu-builder

    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build . -t tlbc-monitor
      - run:
          name: Build report docker image
          command: |
            docker build . -t report-validator -f Dockerfile.report-validator
      - run:
          name: Save docker images
          command: |
            mkdir -p ~/images
            docker save --output ~/images/tlbc-monitor.tar tlbc-monitor
            docker save --output ~/images/report-validator.tar report-validator
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  deploy-docker-image:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - upload-docker-image

  deploy-docker-release-image:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - upload-docker-image

  end2end:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Pull images
          command: |
            cd e2e_tests; docker-compose pull
      - run:
          name: Build images
          command: |
            cd e2e_tests; docker-compose build
      - run:
          name: "Run end2end tests"
          command: |
            e2e_tests/run-e2e.sh

workflows:
  version: 2
  default:
    jobs:
      - install:
          filters:
            <<: *tagged-filter
      - python-39-compatibility:
          filters:
            <<: *tagged-filter
      - run-flake8:
          filters:
            <<: *tagged-filter
          requires:
            - install
      - run-pytest:
          filters:
            <<: *tagged-filter
          requires:
            - install
      - run-mypy:
          filters:
            <<: *tagged-filter
          requires:
            - install
      - run-black:
          filters:
            <<: *tagged-filter
          requires:
            - install
      - end2end:
          filters:
            <<: *tagged-filter
      - build-docker-image:
          filters:
            <<: *tagged-filter

      - deploy-docker-image:
          filters:
            branches:
              only:
                - master
                - pre-release
          requires:
            - run-flake8
            - run-black
            - run-pytest
            - run-mypy
            - install
            - build-docker-image
            - end2end
          context: docker-credentials

      - approve-release:
          type: approval
          filters:
            <<: *tagged-filter
            branches:
              ignore: /.*/
          requires:
            - run-flake8
            - run-black
            - run-pytest
            - run-mypy
            - install
            - build-docker-image
            - end2end

      - deploy-docker-release-image:
          filters:
            <<: *tagged-filter
            branches:
              ignore: /.*/
          requires:
            - approve-release
          context: docker-release-credentials
